diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0485130..3bf20c3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -17,7 +17,7 @@ endif()
 #	include(${CMAKE_SOURCE_DIR}/Tools/CMake/Android.cmake)
 #endif()
 
-include(${CMAKE_SOURCE_DIR}/Tools/CMake/CopyFilesToBin.cmake)
+#include(${CMAKE_SOURCE_DIR}/Tools/CMake/CopyFilesToBin.cmake)
 
 #set(ANDROID TRUE)
 
@@ -137,7 +137,7 @@ if (OUTPUT_DIRECTORY)
 endif (OUTPUT_DIRECTORY)
 
 
-include(${CMAKE_SOURCE_DIR}/Tools/CMake/CommonMacros.cmake)
+#include(${CMAKE_SOURCE_DIR}/Tools/CMake/CommonMacros.cmake)
 
 include_directories( ${SDK_DIR} )
 include_directories( ${CMAKE_SOURCE_DIR}/Code/CryEngine/CryCommon )
@@ -180,8 +180,6 @@ endif()
 if (OPTION_GAME_PROJECT STREQUAL "BenchmarkVR")
 	add_subdirectory(Code/Game_Skyharbor/BenchmarkFramework)
 	add_subdirectory(Code/Game_Skyharbor/GameDll)
-	set_solution_folder("Projects" BenchmarkFramework)
-	set_solution_folder("Projects" CryGameSkyharbor)
 endif()
 
 # CryEngine
@@ -195,7 +193,7 @@ add_subdirectory(Code/CryEngine/CryFont)
 add_subdirectory(Code/CryEngine/CryInput)
 add_subdirectory(Code/CryEngine/CryMovie)
 add_subdirectory(Code/CryEngine/CryNetwork)
-add_subdirectory(Code/CryEngine/CryNetwork/Lobby)
+#add_subdirectory(Code/CryEngine/CryNetwork/Lobby)
 add_subdirectory(Code/CryEngine/CryPhysics)
 add_subdirectory(Code/CryEngine/RenderDll/XRenderD3D9)
 
@@ -222,7 +220,7 @@ endif (WIN32)
 
 if (OPTION_CRY_EXTENSIONS)
 	# CryExtensions
-	add_subdirectory(Code/CryExtensions/CrySchematyc)
+	#add_subdirectory(Code/CryExtensions/CrySchematyc)
 	#add_subdirectory(Code/CryExtensions/CryDescriptor)
 endif()
 
@@ -293,83 +291,83 @@ if (MSVC_VERSION LESS 1900)
 	add_subdirectory(Code/Sandbox/Plugins/PerforcePlugin)
 endif()
 	
-	set_solution_folder("Sandbox" Editor)
-	set_solution_folder("Sandbox" EditorQt)
-	set_solution_folder("Sandbox/Plugins" EditorCommon)
-	set_solution_folder("Sandbox/Plugins" EditorAnimation)
-	set_solution_folder("Sandbox/Plugins" EditorConsole)
-	set_solution_folder("Sandbox/Plugins" CryDesigner)
-	set_solution_folder("Sandbox/Plugins" EditorFbxPlugin)
-	set_solution_folder("Sandbox/Plugins" EditorFbxImport)
-	set_solution_folder("Sandbox/Plugins" PerforcePlugin)
+	#set_solution_folder("Sandbox" Editor)
+	#set_solution_folder("Sandbox" EditorQt)
+	#set_solution_folder("Sandbox/Plugins" EditorCommon)
+	#set_solution_folder("Sandbox/Plugins" EditorAnimation)
+	#set_solution_folder("Sandbox/Plugins" EditorConsole)
+	#set_solution_folder("Sandbox/Plugins" CryDesigner)
+	#set_solution_folder("Sandbox/Plugins" EditorFbxPlugin)
+	#set_solution_folder("Sandbox/Plugins" EditorFbxImport)
+	#set_solution_folder("Sandbox/Plugins" PerforcePlugin)
 	
-	set_solution_folder("Sandbox/Plugins/Audio" EditorAudioControlsEditor)
-	set_solution_folder("Sandbox/Plugins/Audio" EditorAudioControlsEditorCommon)
-	set_solution_folder("Sandbox/Plugins/Audio" EditorCryAudioImplSDLMixer)
-	set_solution_folder("Sandbox/Plugins/Audio" EditorCryAudioImplWwise)
+	#set_solution_folder("Sandbox/Plugins/Audio" EditorAudioControlsEditor)
+	#set_solution_folder("Sandbox/Plugins/Audio" EditorAudioControlsEditorCommon)
+	#set_solution_folder("Sandbox/Plugins/Audio" EditorCryAudioImplSDLMixer)
+	#set_solution_folder("Sandbox/Plugins/Audio" EditorCryAudioImplWwise)
 endif()
 
 set_property(GLOBAL PROPERTY USE_FOLDERS ON)
-set_solution_folder("CryCommon" CryCommon)
-
-set_solution_folder("CryEngine/Shaders" Shaders)
-set_solution_folder("CryEngine/Audio" CryAudioSystem)
-set_solution_folder("CryEngine/Audio/Implementations" CryAudioImplFmod)
-set_solution_folder("CryEngine/Audio/Implementations" CryAudioImplWwise)
-set_solution_folder("CryEngine/Audio/Implementations" CryAudioImplSDLMixer)
-set_solution_folder("CryEngine" Cry3DEngine)
-set_solution_folder("CryEngine" CryParticleSystem)
-set_solution_folder("CryEngine" CryAISystem)
-set_solution_folder("CryEngine" CryAnimation)
-set_solution_folder("CryEngine" CryEntitySystem)
-set_solution_folder("CryEngine" CryFont)
-set_solution_folder("CryEngine" CryInput)
-set_solution_folder("CryEngine" CryLiveCreate)
-set_solution_folder("CryEngine" CryMovie)
-set_solution_folder("CryEngine" CryNetwork)
-set_solution_folder("CryEngine" CryLobby)
-set_solution_folder("CryEngine" CryOnline)
-set_solution_folder("CryEngine" CryPhysics)
-set_solution_folder("CryEngine" CryPlatform)
-set_solution_folder("CryEngine" CryScriptSystem)
-set_solution_folder("CryEngine" CrySystem)
-set_solution_folder("CryEngine" CryRenderD3D11)
-set_solution_folder("CryEngine" CryRenderD3D12)
-
-set_solution_folder("CryExtensions" GameStream)
-
-set_solution_folder("Projects" CryAction)
-set_solution_folder("Projects" CryGameHomefront2)
-
-set_solution_folder("Projects" CryGameSDK)
-set_solution_folder("Projects" GameHunt)
-set_solution_folder("Projects" DescriptorFramework)
-set_solution_folder("Projects" Schematyc)
-set_solution_folder("Projects" UIFramework)
-
-set_solution_folder("Projects" CryGameScripts)
-
-set_solution_folder("Launchers" DedicatedArbitratorLauncher)
-set_solution_folder("Launchers" DedicatedLauncher)
-set_solution_folder("Launchers" WindowsLauncher)
-set_solution_folder("Launchers" DurangoLauncher)
-set_solution_folder("Launchers" OrbisLauncher)
-
-set_solution_folder("Libs" expat)
-set_solution_folder("Libs" freetype)
-set_solution_folder("Libs" lua)
-set_solution_folder("Libs" zlib)
-set_solution_folder("Libs" lz4)
-set_solution_folder("Libs" lzma)
-set_solution_folder("Libs" lzss)
-set_solution_folder("Libs" md5)
-set_solution_folder("Libs" tiff)
-set_solution_folder("Libs" bigdigits)
-set_solution_folder("Libs" oculus)
-set_solution_folder("Libs" strophe)
-set_solution_folder("Libs" yasli)
-set_solution_folder("Libs" tomcrypt)
-set_solution_folder("Libs" prt)
-set_solution_folder("Libs" python27)
-
-copy_binary_files_to_target()
+#set_solution_folder("CryCommon" CryCommon)
+
+#set_solution_folder("CryEngine/Shaders" Shaders)
+#set_solution_folder("CryEngine/Audio" CryAudioSystem)
+#set_solution_folder("CryEngine/Audio/Implementations" CryAudioImplFmod)
+#set_solution_folder("CryEngine/Audio/Implementations" CryAudioImplWwise)
+#set_solution_folder("CryEngine/Audio/Implementations" CryAudioImplSDLMixer)
+#set_solution_folder("CryEngine" Cry3DEngine)
+#set_solution_folder("CryEngine" CryParticleSystem)
+#set_solution_folder("CryEngine" CryAISystem)
+#set_solution_folder("CryEngine" CryAnimation)
+#set_solution_folder("CryEngine" CryEntitySystem)
+#set_solution_folder("CryEngine" CryFont)
+#set_solution_folder("CryEngine" CryInput)
+#set_solution_folder("CryEngine" CryLiveCreate)
+#set_solution_folder("CryEngine" CryMovie)
+#set_solution_folder("CryEngine" CryNetwork)
+#set_solution_folder("CryEngine" CryLobby)
+#set_solution_folder("CryEngine" CryOnline)
+#set_solution_folder("CryEngine" CryPhysics)
+#set_solution_folder("CryEngine" CryPlatform)
+#set_solution_folder("CryEngine" CryScriptSystem)
+#set_solution_folder("CryEngine" CrySystem)
+#set_solution_folder("CryEngine" CryRenderD3D11)
+#set_solution_folder("CryEngine" CryRenderD3D12)
+
+#set_solution_folder("CryExtensions" GameStream)
+
+#set_solution_folder("Projects" CryAction)
+#set_solution_folder("Projects" CryGameHomefront2)
+
+#set_solution_folder("Projects" CryGameSDK)
+#set_solution_folder("Projects" GameHunt)
+#set_solution_folder("Projects" DescriptorFramework)
+#set_solution_folder("Projects" Schematyc)
+#set_solution_folder("Projects" UIFramework)
+
+#set_solution_folder("Projects" CryGameScripts)
+
+#set_solution_folder("Launchers" DedicatedArbitratorLauncher)
+#set_solution_folder("Launchers" DedicatedLauncher)
+#set_solution_folder("Launchers" WindowsLauncher)
+#set_solution_folder("Launchers" DurangoLauncher)
+#set_solution_folder("Launchers" OrbisLauncher)
+
+#set_solution_folder("Libs" expat)
+#set_solution_folder("Libs" freetype)
+#set_solution_folder("Libs" lua)
+#set_solution_folder("Libs" zlib)
+#set_solution_folder("Libs" lz4)
+#set_solution_folder("Libs" lzma)
+#set_solution_folder("Libs" lzss)
+#set_solution_folder("Libs" md5)
+#set_solution_folder("Libs" tiff)
+#set_solution_folder("Libs" bigdigits)
+#set_solution_folder("Libs" oculus)
+#set_solution_folder("Libs" strophe)
+#set_solution_folder("Libs" yasli)
+#set_solution_folder("Libs" tomcrypt)
+#set_solution_folder("Libs" prt)
+#set_solution_folder("Libs" python27)
+
+#copy_binary_files_to_target()
diff --git a/Code/CryEngine/Cry3DEngine/CMakeLists.txt b/Code/CryEngine/Cry3DEngine/CMakeLists.txt
index 299039f..3dc439b 100644
--- a/Code/CryEngine/Cry3DEngine/CMakeLists.txt
+++ b/Code/CryEngine/Cry3DEngine/CMakeLists.txt
@@ -406,31 +406,39 @@ source_group("Water" FILES ${SourceGroup_Water})
 
 # Support unity build with uber files
 set(Cry3DEngine_CBuffer_cpp ${SourceGroup_CBuffer}  )
-enable_unity_build( "Cry3DEngine_CBuffer.cpp" Cry3DEngine_CBuffer_cpp )
+##enable_unity_build( "Cry3DEngine_CBuffer.cpp" Cry3DEngine_CBuffer_cpp )
 
 set(Cry3DEngine_main_0_uber_cpp ${SourceGroup_Effects_SkyLight} ${SourceGroup_Environment} ${SourceGroup_LightEntity} ${SourceGroup_Material} ${SourceGroup_PostProcess} ${SourceGroup_RenderMeshUtils} ${SourceGroup_Shadows} ${SourceGroup_Vegetation}  )
-enable_unity_build( "Cry3DEngine_main_0_uber.cpp" Cry3DEngine_main_0_uber_cpp )
+##enable_unity_build( "Cry3DEngine_main_0_uber.cpp" Cry3DEngine_main_0_uber_cpp )
 
 set(Cry3DEngine_main_1_uber_cpp ${SourceGroup_3DEngine} ${SourceGroup_ClipVolumes} ${SourceGroup_RenderNodes_Breakables} ${SourceGroup_VisAreas}  )
-enable_unity_build( "Cry3DEngine_main_1_uber.cpp" Cry3DEngine_main_1_uber_cpp )
+##enable_unity_build( "Cry3DEngine_main_1_uber.cpp" Cry3DEngine_main_1_uber_cpp )
 
 set(Cry3DEngine_main_2_uber_cpp ${SourceGroup_Brush} ${SourceGroup_CFG} ${SourceGroup_CVars} ${SourceGroup_Effects_Clounds} ${SourceGroup_MeshCompiler}  )
-enable_unity_build( "Cry3DEngine_main_2_uber.cpp" Cry3DEngine_main_2_uber_cpp )
+##enable_unity_build( "Cry3DEngine_main_2_uber.cpp" Cry3DEngine_main_2_uber_cpp )
 
+#<<<<<<< Updated upstream
 set(Cry3DEngine_main_3_uber_cpp ${SourceGroup_Effects_Decals} ${SourceGroup_Effects_FogVolumes} ${SourceGroup_Effects_Optics} ${SourceGroup_GeomCache} ${SourceGroup_RenderNodes} ${SourceGroup_RenderNodes_Roads} ${SourceGroup_RenderNodes_Ropes} ${SourceGroup_SVO}  )
-enable_unity_build( "Cry3DEngine_main_3_uber.cpp" Cry3DEngine_main_3_uber_cpp )
+#enable_unity_build( "Cry3DEngine_main_3_uber.cpp" Cry3DEngine_main_3_uber_cpp )
+#||||||| merged common ancestors
+#set(Cry3DEngine_main_3_uber_cpp ${SourceGroup_Effects_Decals} ${SourceGroup_Effects_FogVolumes} ${SourceGroup_Effects_LightPropagationVolumes} ${SourceGroup_Effects_Optics} ${SourceGroup_GeomCache} ${SourceGroup_RenderNodes} ${SourceGroup_RenderNodes_Roads} ${SourceGroup_RenderNodes_Ropes} ${SourceGroup_SVO}  )
+#enable_unity_build( "Cry3DEngine_main_3_uber.cpp" Cry3DEngine_main_3_uber_cpp )
+#=======
+#set(Cry3DEngine_main_3_uber_cpp ${SourceGroup_Effects_Decals} ${SourceGroup_Effects_FogVolumes} ${SourceGroup_Effects_LightPropagationVolumes} ${SourceGroup_Effects_Optics} ${SourceGroup_GeomCache} ${SourceGroup_RenderNodes} ${SourceGroup_RenderNodes_Roads} ${SourceGroup_RenderNodes_Ropes} ${SourceGroup_SVO}  )
+##enable_unity_build( "Cry3DEngine_main_3_uber.cpp" Cry3DEngine_main_3_uber_cpp )
+#>>>>>>> Stashed changes
 
 set(Cry3DEngine_objects_uber_cpp ${SourceGroup_ObjectManager} ${SourceGroup_ObjectsTree} ${SourceGroup_StatObj}  )
-enable_unity_build( "Cry3DEngine_objects_uber.cpp" Cry3DEngine_objects_uber_cpp )
+##enable_unity_build( "Cry3DEngine_objects_uber.cpp" Cry3DEngine_objects_uber_cpp )
 
 set(Cry3DEngine_particles_uber_cpp ${SourceGroup_Effects_Particles}  )
-enable_unity_build( "Cry3DEngine_particles_uber.cpp" Cry3DEngine_particles_uber_cpp )
+##enable_unity_build( "Cry3DEngine_particles_uber.cpp" Cry3DEngine_particles_uber_cpp )
 
 set(Cry3DEngine_terrain_uber_cpp ${SourceGroup_Terrain} ${SourceGroup_Terrain_Sector}  )
-enable_unity_build( "Cry3DEngine_terrain_uber.cpp" Cry3DEngine_terrain_uber_cpp )
+##enable_unity_build( "Cry3DEngine_terrain_uber.cpp" Cry3DEngine_terrain_uber_cpp )
 
 set(Cry3DEngine_volume_water_uber_cpp ${SourceGroup_Effects_VolumeObject} ${SourceGroup_Water}  )
-enable_unity_build( "Cry3DEngine_volume_water_uber.cpp" Cry3DEngine_volume_water_uber_cpp )
+##enable_unity_build( "Cry3DEngine_volume_water_uber.cpp" Cry3DEngine_volume_water_uber_cpp )
 
 set(NoUberFile ${SourceGroup_Root}  )
 
@@ -457,6 +465,6 @@ add_library( ${THIS_PROJECT} ${SOURCES})
 target_link_libraries( ${THIS_PROJECT} CryParticleSystem )
 target_link_libraries( ${THIS_PROJECT} lz4 )
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+##USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+##SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/CryEngine/Cry3DEngine/ParticleSystem/CMakeLists.txt b/Code/CryEngine/Cry3DEngine/ParticleSystem/CMakeLists.txt
index ad81c61..3a132ee 100644
--- a/Code/CryEngine/Cry3DEngine/ParticleSystem/CMakeLists.txt
+++ b/Code/CryEngine/Cry3DEngine/ParticleSystem/CMakeLists.txt
@@ -100,10 +100,10 @@ set (SourceGroup_Root
 set(NoUberFile ${SourceGroup_Root}  )
 
 set(ParticleFeatures_uber_cpp ${SourceGroup_Features}  )
-enable_unity_build( "ParticleFeatures_uber.cpp" ParticleFeatures_uber_cpp )
+##enable_unity_build( "ParticleFeatures_uber.cpp" ParticleFeatures_uber_cpp )
 
 set(ParticleSystem_uber_cpp ${SourceGroup_ParticleSystem}  )
-enable_unity_build( "ParticleSystem_uber.cpp" ParticleSystem_uber_cpp )
+##enable_unity_build( "ParticleSystem_uber.cpp" ParticleSystem_uber_cpp )
 
 
 set (SOURCES
@@ -119,6 +119,6 @@ include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/.. )
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES} )
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+##USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+##SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/CryEngine/CryAISystem/CMakeLists.txt b/Code/CryEngine/CryAISystem/CMakeLists.txt
index 93fe17a..7fed7d8 100644
--- a/Code/CryEngine/CryAISystem/CMakeLists.txt
+++ b/Code/CryEngine/CryAISystem/CMakeLists.txt
@@ -636,34 +636,34 @@ source_group("Walkability" FILES ${SourceGroup_Walkability})
 
 # Support unity build with uber files
 set(CryAISystem_ai_object_uber_cpp ${SourceGroup_AIObject} ${SourceGroup_AIObject_AIObjectManager} ${SourceGroup_AIObject_Coordination}  )
-enable_unity_build( "CryAISystem_ai_object_uber.cpp" CryAISystem_ai_object_uber_cpp )
+#enable_unity_build( "CryAISystem_ai_object_uber.cpp" CryAISystem_ai_object_uber_cpp )
 
 set(CryAISystem_helpers_uber_cpp ${SourceGroup_Helpers} ${SourceGroup_Helpers_CalculationStopper} ${SourceGroup_Helpers_CodeCoverage} ${SourceGroup_Helpers_Debug} ${SourceGroup_Helpers_Debug_AIBubblesSystem} ${SourceGroup_Helpers_PID}  )
-enable_unity_build( "CryAISystem_helpers_uber.cpp" CryAISystem_helpers_uber_cpp )
+#enable_unity_build( "CryAISystem_helpers_uber.cpp" CryAISystem_helpers_uber_cpp )
 
 set(CryAISystem_navigation_uber_0_cpp ${SourceGroup_Navigation} ${SourceGroup_Navigation_DataStructs} ${SourceGroup_Navigation_PathFinding}  )
-enable_unity_build( "CryAISystem_navigation_uber_0.cpp" CryAISystem_navigation_uber_0_cpp )
+#enable_unity_build( "CryAISystem_navigation_uber_0.cpp" CryAISystem_navigation_uber_0_cpp )
 
 set(CryAISystem_navigation_uber_1_cpp ${SourceGroup_Navigation_MNM} ${SourceGroup_Navigation_NavigationSystem}  )
-enable_unity_build( "CryAISystem_navigation_uber_1.cpp" CryAISystem_navigation_uber_1_cpp )
+#enable_unity_build( "CryAISystem_navigation_uber_1.cpp" CryAISystem_navigation_uber_1_cpp )
 
 set(CryAISystem_uber_0_cpp ${SourceGroup_AILightManager} ${SourceGroup_Actions} ${SourceGroup_Deprecated} ${SourceGroup_Lib} ${SourceGroup_Perception} ${SourceGroup_Perception_TargetSelection} ${SourceGroup_Scripting} ${SourceGroup_SmartObjects}  )
-enable_unity_build( "CryAISystem_uber_0.cpp" CryAISystem_uber_0_cpp )
+#enable_unity_build( "CryAISystem_uber_0.cpp" CryAISystem_uber_0_cpp )
 
 set(CryAISystem_uber_1_cpp ${SourceGroup_CoverSystem} ${SourceGroup_Factions} ${SourceGroup_Group}  )
-enable_unity_build( "CryAISystem_uber_1.cpp" CryAISystem_uber_1_cpp )
+#enable_unity_build( "CryAISystem_uber_1.cpp" CryAISystem_uber_1_cpp )
 
 set(CryAISystem_uber_2_cpp ${SourceGroup_CommunicationSystem} ${SourceGroup_System}  )
-enable_unity_build( "CryAISystem_uber_2.cpp" CryAISystem_uber_2_cpp )
+#enable_unity_build( "CryAISystem_uber_2.cpp" CryAISystem_uber_2_cpp )
 
 set(CryAISystem_uber_3_cpp ${SourceGroup_Movement} ${SourceGroup_Movement_Blocks} ${SourceGroup_Movement_GoalOps} ${SourceGroup_Movement_Helpers} ${SourceGroup_Movement_System} ${SourceGroup_SelectionTree} ${SourceGroup_TacticalPointSystem}  )
-enable_unity_build( "CryAISystem_uber_3.cpp" CryAISystem_uber_3_cpp )
+#enable_unity_build( "CryAISystem_uber_3.cpp" CryAISystem_uber_3_cpp )
 
 set(CryAISystem_uber_4_cpp ${SourceGroup_BehaviorTree} ${SourceGroup_FlowNodes} ${SourceGroup_GameSpecific} ${SourceGroup_Sequence}  )
-enable_unity_build( "CryAISystem_uber_4.cpp" CryAISystem_uber_4_cpp )
+#enable_unity_build( "CryAISystem_uber_4.cpp" CryAISystem_uber_4_cpp )
 
 set(CryAISystem_uber_6_cpp ${SourceGroup_ClusterDetector} ${SourceGroup_CollisionAvoidance} ${SourceGroup_Goals} ${SourceGroup_Goals_GoalOps} ${SourceGroup_HideObjects} ${SourceGroup_InterestSystem} ${SourceGroup_Mannequin} ${SourceGroup_Root} ${SourceGroup_Walkability}  )
-enable_unity_build( "CryAISystem_uber_6.cpp" CryAISystem_uber_6_cpp )
+#enable_unity_build( "CryAISystem_uber_6.cpp" CryAISystem_uber_6_cpp )
 
 set(NoUberFile  )
 
@@ -687,6 +687,6 @@ include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
 
 add_library( ${THIS_PROJECT} ${SOURCES})
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/CryEngine/CryAction/CMakeLists.txt b/Code/CryEngine/CryAction/CMakeLists.txt
index d1293df..2db0eaf 100644
--- a/Code/CryEngine/CryAction/CMakeLists.txt
+++ b/Code/CryEngine/CryAction/CMakeLists.txt
@@ -1265,58 +1265,58 @@ source_group("View System" FILES ${SourceGroup_ViewSystem})
 
 # Support unity build with uber files
 set(CryAction_animgraph_uber_cpp ${SourceGroup_AnimationGraph_GameObject} ${SourceGroup_AnimationGraph_SystemFiles}  )
-enable_unity_build( "CryAction_animgraph_uber.cpp" CryAction_animgraph_uber_cpp )
+##enable_unity_build( "CryAction_animgraph_uber.cpp" CryAction_animgraph_uber_cpp )
 
 set(CryAction_dialogsystem_uber_cpp ${SourceGroup_DialogSystem}  )
-enable_unity_build( "CryAction_dialogsystem_uber.cpp" CryAction_dialogsystem_uber_cpp )
+##enable_unity_build( "CryAction_dialogsystem_uber.cpp" CryAction_dialogsystem_uber_cpp )
 
 set(CryAction_flashui_uber_cpp ${SourceGroup_FlashUI}  )
-enable_unity_build( "CryAction_flashui_uber.cpp" CryAction_flashui_uber_cpp )
+##enable_unity_build( "CryAction_flashui_uber.cpp" CryAction_flashui_uber_cpp )
 
 set(CryAction_flowsystem_nodes_uber_cpp ${SourceGroup_FlowSystem_Nodes} ${SourceGroup_FlowSystem_Nodes_Vehicle} ${SourceGroup_FlowSystem_UnitTests}  )
-enable_unity_build( "CryAction_flowsystem_nodes_uber.cpp" CryAction_flowsystem_nodes_uber_cpp )
+##enable_unity_build( "CryAction_flowsystem_nodes_uber.cpp" CryAction_flowsystem_nodes_uber_cpp )
 
 set(CryAction_flowsystem_uber_cpp ${SourceGroup_FlowSystem} ${SourceGroup_FlowSystem_Inspectors} ${SourceGroup_FlowSystem_Modules}  )
-enable_unity_build( "CryAction_flowsystem_uber.cpp" CryAction_flowsystem_uber_cpp )
+##enable_unity_build( "CryAction_flowsystem_uber.cpp" CryAction_flowsystem_uber_cpp )
 
 set(CryAction_game_objects_uber_cpp ${SourceGroup_GameObjects} ${SourceGroup_GameRules} ${SourceGroup_GameSession} ${SourceGroup_GameTokens} ${SourceGroup_GameVolumes} ${SourceGroup_GameVolumes_VolumeClasses} ${SourceGroup_GameplayRecorder} ${SourceGroup_GameplayRecorder_GameplayAnalyst}  )
-enable_unity_build( "CryAction_game_objects_uber.cpp" CryAction_game_objects_uber_cpp )
+##enable_unity_build( "CryAction_game_objects_uber.cpp" CryAction_game_objects_uber_cpp )
 
 set(CryAction_main_uber_0_cpp ${SourceGroup_Animation} ${SourceGroup_Animation_PoseAligner} ${SourceGroup_Animation_PoseModifier} ${SourceGroup_Checkpoint} ${SourceGroup_CustomEvents} ${SourceGroup_PhysicsHelpers} ${SourceGroup_TestSystem}  )
-enable_unity_build( "CryAction_main_uber_0.cpp" CryAction_main_uber_0_cpp )
+##enable_unity_build( "CryAction_main_uber_0.cpp" CryAction_main_uber_0_cpp )
 
 set(CryAction_main_uber_1_cpp ${SourceGroup_ActionFiles} ${SourceGroup_ActorFiles} ${SourceGroup_ItemFiles}  )
-enable_unity_build( "CryAction_main_uber_1.cpp" CryAction_main_uber_1_cpp )
+##enable_unity_build( "CryAction_main_uber_1.cpp" CryAction_main_uber_1_cpp )
 
 set(CryAction_main_uber_2_cpp ${SourceGroup_DebugHelpers} ${SourceGroup_LevelFiles} ${SourceGroup_MetadataRecorder} ${SourceGroup_ViewSystem}  )
-enable_unity_build( "CryAction_main_uber_2.cpp" CryAction_main_uber_2_cpp )
+##enable_unity_build( "CryAction_main_uber_2.cpp" CryAction_main_uber_2_cpp )
 
 set(CryAction_main_uber_3_cpp ${SourceGroup_CooperativeAnimationManager} ${SourceGroup_CustomActions} ${SourceGroup_RangeSignaling} ${SourceGroup_RemoteControl} ${SourceGroup_SignalTimers} ${SourceGroup_SimpleHTTPServer} ${SourceGroup_Statistics} ${SourceGroup_UIDraw}  )
-enable_unity_build( "CryAction_main_uber_3.cpp" CryAction_main_uber_3_cpp )
+##enable_unity_build( "CryAction_main_uber_3.cpp" CryAction_main_uber_3_cpp )
 
 set(CryAction_main_uber_4_cpp ${SourceGroup_AIFiles} ${SourceGroup_EffectSystem} ${SourceGroup_ForceFeedbackSystem} ${SourceGroup_LipSync} ${SourceGroup_LivePreview} ${SourceGroup_Root} ${SourceGroup_SegmentedWorld} ${SourceGroup_SharedParams}  )
-enable_unity_build( "CryAction_main_uber_4.cpp" CryAction_main_uber_4_cpp )
+##enable_unity_build( "CryAction_main_uber_4.cpp" CryAction_main_uber_4_cpp )
 
 set(CryAction_main_uber_durango_cpp  )
-enable_unity_build( "CryAction_main_uber_durango.cpp" CryAction_main_uber_durango_cpp )
+##enable_unity_build( "CryAction_main_uber_durango.cpp" CryAction_main_uber_durango_cpp )
 
 set(CryAction_main_uber_orbis_cpp ${SourceGroup_PlayerProfiles}  )
-enable_unity_build( "CryAction_main_uber_orbis.cpp" CryAction_main_uber_orbis_cpp )
+##enable_unity_build( "CryAction_main_uber_orbis.cpp" CryAction_main_uber_orbis_cpp )
 
 set(CryAction_mannequin_uber_cpp ${SourceGroup_Interfaces} ${SourceGroup_Mannequin} ${SourceGroup_Mannequin_Experimental} ${SourceGroup_Mannequin_MannequinAG} ${SourceGroup_Mannequin_ProceduralClips} ${SourceGroup_Mannequin_Xml}  )
-enable_unity_build( "CryAction_mannequin_uber.cpp" CryAction_mannequin_uber_cpp )
+##enable_unity_build( "CryAction_mannequin_uber.cpp" CryAction_mannequin_uber_cpp )
 
 set(CryAction_material_effects_uber_cpp ${SourceGroup_MaterialEffects} ${SourceGroup_MaterialEffects_Effects} ${SourceGroup_MaterialEffects_Subcomponents} ${SourceGroup_MaterialEffects_Utils}  )
-enable_unity_build( "CryAction_material_effects_uber.cpp" CryAction_material_effects_uber_cpp )
+##enable_unity_build( "CryAction_material_effects_uber.cpp" CryAction_material_effects_uber_cpp )
 
 set(CryAction_network_uber_cpp ${SourceGroup_Network} ${SourceGroup_Network_Breakability} ${SourceGroup_Network_ContextEstablishmentTasks} ${SourceGroup_Network_Core} ${SourceGroup_Network_GameSpy} ${SourceGroup_Network_Helpers} ${SourceGroup_Network_Voice}  )
-enable_unity_build( "CryAction_network_uber.cpp" CryAction_network_uber_cpp )
+##enable_unity_build( "CryAction_network_uber.cpp" CryAction_network_uber_cpp )
 
 set(CryAction_serialization_uber_cpp ${SourceGroup_Serialization} ${SourceGroup_Serialization_BinarySaveGames} ${SourceGroup_Serialization_BinarySaveGames_XMLCPBin} ${SourceGroup_Serialization_BinarySaveGames_XMLCPBin_Reader} ${SourceGroup_Serialization_BinarySaveGames_XMLCPBin_Writer} ${SourceGroup_Serialization_ScriptXMLHelpers} ${SourceGroup_Serialization_Serializetoscript} ${SourceGroup_Serialization_XMLSaveGames}  )
-enable_unity_build( "CryAction_serialization_uber.cpp" CryAction_serialization_uber_cpp )
+##enable_unity_build( "CryAction_serialization_uber.cpp" CryAction_serialization_uber_cpp )
 
 set(CryAction_vehicle_uber_cpp ${SourceGroup_VehicleFiles} ${SourceGroup_VehicleFiles_Actions} ${SourceGroup_VehicleFiles_Animation} ${SourceGroup_VehicleFiles_Damages} ${SourceGroup_VehicleFiles_Damages_DamageBehaviors} ${SourceGroup_VehicleFiles_Main} ${SourceGroup_VehicleFiles_Network} ${SourceGroup_VehicleFiles_Parts} ${SourceGroup_VehicleFiles_Script} ${SourceGroup_VehicleFiles_SeatActions} ${SourceGroup_VehicleFiles_Views}  )
-enable_unity_build( "CryAction_vehicle_uber.cpp" CryAction_vehicle_uber_cpp )
+##enable_unity_build( "CryAction_vehicle_uber.cpp" CryAction_vehicle_uber_cpp )
 
 set(NoUberFile ${SourceGroup_PlayerProfiles_jsmn}  )
 
@@ -1350,8 +1350,8 @@ include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
 add_library( ${THIS_PROJECT} ${SOURCES})
 target_link_libraries( ${THIS_PROJECT} md5 )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+##SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+##USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+##SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/CryEngine/CryAnimation/CMakeLists.txt b/Code/CryEngine/CryAnimation/CMakeLists.txt
index cb26cf0..b48ddb2 100644
--- a/Code/CryEngine/CryAnimation/CMakeLists.txt
+++ b/Code/CryEngine/CryAnimation/CMakeLists.txt
@@ -273,22 +273,22 @@ source_group("Vertex" FILES ${SourceGroup_Vertex})
 
 # Support unity build with uber files
 set(CryAnimation_character_instance_uber_0_cpp ${SourceGroup_CharacterInstance} ${SourceGroup_CharacterInstance_Attachment} ${SourceGroup_CharacterInstance_SkeletonAnim} ${SourceGroup_CharacterInstance_SkeletonPose}  )
-enable_unity_build( "CryAnimation_character_instance_uber_0.cpp" CryAnimation_character_instance_uber_0_cpp )
+#enable_unity_build( "CryAnimation_character_instance_uber_0.cpp" CryAnimation_character_instance_uber_0_cpp )
 
 set(CryAnimation_character_instance_uber_1_cpp ${SourceGroup_CharacterInstance_FacialAnimation}  )
-enable_unity_build( "CryAnimation_character_instance_uber_1.cpp" CryAnimation_character_instance_uber_1_cpp )
+#enable_unity_build( "CryAnimation_character_instance_uber_1.cpp" CryAnimation_character_instance_uber_1_cpp )
 
 set(CryAnimation_character_instance_uber_2_cpp ${SourceGroup_CharacterInstance_PoseModifier}  )
-enable_unity_build( "CryAnimation_character_instance_uber_2.cpp" CryAnimation_character_instance_uber_2_cpp )
+#enable_unity_build( "CryAnimation_character_instance_uber_2.cpp" CryAnimation_character_instance_uber_2_cpp )
 
 set(CryAnimation_character_instance_uber_3_cpp ${SourceGroup_CharacterInstance_Command} ${SourceGroup_CharacterInstance_Skeleton} ${SourceGroup_CharacterInstance_SkeletonPhysics}  )
-enable_unity_build( "CryAnimation_character_instance_uber_3.cpp" CryAnimation_character_instance_uber_3_cpp )
+#enable_unity_build( "CryAnimation_character_instance_uber_3.cpp" CryAnimation_character_instance_uber_3_cpp )
 
 set(CryAnimation_character_manager_uber_cpp ${SourceGroup_CharacterManager} ${SourceGroup_CharacterManager_AnimLoader} ${SourceGroup_CharacterManager_ModelRig}  )
-enable_unity_build( "CryAnimation_character_manager_uber.cpp" CryAnimation_character_manager_uber_cpp )
+#enable_unity_build( "CryAnimation_character_manager_uber.cpp" CryAnimation_character_manager_uber_cpp )
 
 set(CryAnimation_uber_0_cpp ${SourceGroup_Common} ${SourceGroup_Memory} ${SourceGroup_Vertex}  )
-enable_unity_build( "CryAnimation_uber_0.cpp" CryAnimation_uber_0_cpp )
+#enable_unity_build( "CryAnimation_uber_0.cpp" CryAnimation_uber_0_cpp )
 
 set(NoUberFile ${SourceGroup_Root} ${SourceGroup_Serialization}  )
 
@@ -309,6 +309,6 @@ include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
 
 add_library( ${THIS_PROJECT} ${SOURCES})
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "stdafx.h" "stdafx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "stdafx.h" "stdafx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/CryEngine/CryAudioSystem/CMakeLists.txt b/Code/CryEngine/CryAudioSystem/CMakeLists.txt
index 297495c..963c8af 100644
--- a/Code/CryEngine/CryAudioSystem/CMakeLists.txt
+++ b/Code/CryEngine/CryAudioSystem/CMakeLists.txt
@@ -46,7 +46,7 @@ source_group("Source Files" FILES ${SourceGroup_SourceFiles})
 
 # Support unity build with uber files
 set(CryAudioSystem_uber_0_cpp ${SourceGroup_HeaderFiles} ${SourceGroup_SourceFiles}  )
-enable_unity_build( "CryAudioSystem_uber_0.cpp" CryAudioSystem_uber_0_cpp )
+#enable_unity_build( "CryAudioSystem_uber_0.cpp" CryAudioSystem_uber_0_cpp )
 
 set(NoUberFile ${SourceGroup_Root}  )
 
@@ -62,6 +62,6 @@ include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
 
 add_library( ${THIS_PROJECT} ${SOURCES})
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "stdafx.h" "stdafx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "stdafx.h" "stdafx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
diff --git a/Code/CryEngine/CryAudioSystem/implementations/CryAudioImplFmod/CMakeLists.txt b/Code/CryEngine/CryAudioSystem/implementations/CryAudioImplFmod/CMakeLists.txt
index 457871f..ccc4d65 100644
--- a/Code/CryEngine/CryAudioSystem/implementations/CryAudioImplFmod/CMakeLists.txt
+++ b/Code/CryEngine/CryAudioSystem/implementations/CryAudioImplFmod/CMakeLists.txt
@@ -35,8 +35,16 @@ source_group("Source Files" FILES ${SourceGroup_SourceFiles})
 
 
 # Support unity build with uber files
+<<<<<<< Updated upstream
 set(CryAudioImpl_uber_0_cpp ${SourceGroup_HeaderFiles} ${SourceGroup_SourceFiles}  )
 enable_unity_build( "CryAudioImpl_uber_0.cpp" CryAudioImpl_uber_0_cpp )
+||||||| merged common ancestors
+set(CryAudioImpl_fmod_uber_0_cpp ${SourceGroup_HeaderFiles} ${SourceGroup_SourceFiles}  )
+enable_unity_build( "CryAudioImpl_fmod_uber_0.cpp" CryAudioImpl_fmod_uber_0_cpp )
+=======
+set(CryAudioImpl_fmod_uber_0_cpp ${SourceGroup_HeaderFiles} ${SourceGroup_SourceFiles}  )
+#enable_unity_build( "CryAudioImpl_fmod_uber_0.cpp" CryAudioImpl_fmod_uber_0_cpp )
+>>>>>>> Stashed changes
 
 set(NoUberFile ${SourceGroup_Root}  )
 
@@ -54,6 +62,6 @@ include_directories( ${SDK_DIR}/Audio )
 add_library( ${THIS_PROJECT} ${SOURCES})
 
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "stdafx.h" "stdafx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "stdafx.h" "stdafx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
diff --git a/Code/CryEngine/CryAudioSystem/implementations/CryAudioImplSDLMixer/CMakeLists.txt b/Code/CryEngine/CryAudioSystem/implementations/CryAudioImplSDLMixer/CMakeLists.txt
index 79fbfc7..cb19107 100644
--- a/Code/CryEngine/CryAudioSystem/implementations/CryAudioImplSDLMixer/CMakeLists.txt
+++ b/Code/CryEngine/CryAudioSystem/implementations/CryAudioImplSDLMixer/CMakeLists.txt
@@ -36,7 +36,7 @@ source_group("Source Files" FILES ${SourceGroup_SourceFiles})
 
 # Support unity build with uber files
 set(CryAudioImplSDLMixer_uber_0_cpp ${SourceGroup_HeaderFiles} ${SourceGroup_SourceFiles}  )
-enable_unity_build( "CryAudioImplSDLMixer_uber_0.cpp" CryAudioImplSDLMixer_uber_0_cpp )
+#enable_unity_build( "CryAudioImplSDLMixer_uber_0.cpp" CryAudioImplSDLMixer_uber_0_cpp )
 
 set(NoUberFile ${SourceGroup_Root}  )
 
@@ -75,6 +75,6 @@ add_library( ${THIS_PROJECT} ${SOURCES})
 
 target_link_libraries( ${THIS_PROJECT} SDL2 SDL2_mixer )
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "stdafx.h" "stdafx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "stdafx.h" "stdafx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
diff --git a/Code/CryEngine/CryAudioSystem/implementations/CryAudioImplWwise/CMakeLists.txt b/Code/CryEngine/CryAudioSystem/implementations/CryAudioImplWwise/CMakeLists.txt
index 262c1e2..d84107f 100644
--- a/Code/CryEngine/CryAudioSystem/implementations/CryAudioImplWwise/CMakeLists.txt
+++ b/Code/CryEngine/CryAudioSystem/implementations/CryAudioImplWwise/CMakeLists.txt
@@ -33,8 +33,16 @@ source_group("Source Files" FILES ${SourceGroup_SourceFiles})
 
 
 # Support unity build with uber files
+#<<<<<<< Updated upstream
 set(CryAudioImpl_uber_0_cpp ${SourceGroup_HeaderFiles} ${SourceGroup_SourceFiles}  )
-enable_unity_build( "CryAudioImpl_uber_0.cpp" CryAudioImpl_uber_0_cpp )
+#enable_unity_build( "CryAudioImpl_uber_0.cpp" CryAudioImpl_uber_0_cpp )
+#||||||| merged common ancestors
+#set(CryAudioImplWwise_uber_0_cpp ${SourceGroup_HeaderFiles} ${SourceGroup_SourceFiles}  )
+#enable_unity_build( "CryAudioImplWwise_uber_0.cpp" CryAudioImplWwise_uber_0_cpp )
+#=======
+#set(CryAudioImplWwise_uber_0_cpp ${SourceGroup_HeaderFiles} ${SourceGroup_SourceFiles}  )
+#enable_unity_build( "CryAudioImplWwise_uber_0.cpp" CryAudioImplWwise_uber_0_cpp )
+#>>>>>>> Stashed changes
 
 set(NoUberFile ${SourceGroup_Root}  )
 
@@ -137,6 +145,6 @@ set( WWISE_LIBS ${WWISE_LIBS}
 target_link_libraries( ${THIS_PROJECT} ${WWISE_LIBS} )
 
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "stdafx.h" "stdafx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "stdafx.h" "stdafx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
diff --git a/Code/CryEngine/CryEntitySystem/CMakeLists.txt b/Code/CryEngine/CryEntitySystem/CMakeLists.txt
index 8c29026..384e287 100644
--- a/Code/CryEngine/CryEntitySystem/CMakeLists.txt
+++ b/Code/CryEngine/CryEntitySystem/CMakeLists.txt
@@ -212,13 +212,13 @@ source_group("Source Files" FILES ${SourceGroup_SourceFiles})
 
 # Support unity build with uber files
 set(CryEntitySystem_proxy_uber_cpp ${SourceGroup_Proxy_Area} ${SourceGroup_Proxy_Attributes} ${SourceGroup_Proxy_Audio} ${SourceGroup_Proxy_CameraProxy} ${SourceGroup_Proxy_ClipVolume} ${SourceGroup_Proxy_DynamicResponse} ${SourceGroup_Proxy_FlowGraph} ${SourceGroup_Proxy_Physics} ${SourceGroup_Proxy_Render} ${SourceGroup_Proxy_Script} ${SourceGroup_Proxy_SubstitutionProxy} ${SourceGroup_Proxy_TrackView} ${SourceGroup_Proxy_TriggerProxy}  )
-enable_unity_build( "CryEntitySystem_proxy_uber.cpp" CryEntitySystem_proxy_uber_cpp )
+#enable_unity_build( "CryEntitySystem_proxy_uber.cpp" CryEntitySystem_proxy_uber_cpp )
 
 set(CryEntitySystem_uber_0_cpp ${SourceGroup_EntityClass} ${SourceGroup_Root} ${SourceGroup_SourceFiles}  )
-enable_unity_build( "CryEntitySystem_uber_0.cpp" CryEntitySystem_uber_0_cpp )
+#enable_unity_build( "CryEntitySystem_uber_0.cpp" CryEntitySystem_uber_0_cpp )
 
 set(CryEntitySystem_uber_1_cpp ${SourceGroup_AreaManager} ${SourceGroup_BreakableManager} ${SourceGroup_Loading} ${SourceGroup_PartitionGrid} ${SourceGroup_Pool}  )
-enable_unity_build( "CryEntitySystem_uber_1.cpp" CryEntitySystem_uber_1_cpp )
+#enable_unity_build( "CryEntitySystem_uber_1.cpp" CryEntitySystem_uber_1_cpp )
 
 set(NoUberFile  )
 
@@ -236,6 +236,6 @@ include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
 
 add_library( ${THIS_PROJECT} ${SOURCES})
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "stdafx.h" "stdafx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "stdafx.h" "stdafx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/CryEngine/CryFont/CMakeLists.txt b/Code/CryEngine/CryFont/CMakeLists.txt
index 3e7abcf..bd2823a 100644
--- a/Code/CryEngine/CryFont/CMakeLists.txt
+++ b/Code/CryEngine/CryFont/CMakeLists.txt
@@ -41,7 +41,7 @@ source_group("Source Files" FILES ${SourceGroup_SourceFiles})
 
 # Support unity build with uber files
 set(CryFont_Uber_0_cpp ${SourceGroup_HeaderFiles} ${SourceGroup_SourceFiles}  )
-enable_unity_build( "CryFont_Uber_0.cpp" CryFont_Uber_0_cpp )
+#enable_unity_build( "CryFont_Uber_0.cpp" CryFont_Uber_0_cpp )
 
 set(NoUberFile ${SourceGroup_Root}  )
 
@@ -59,6 +59,6 @@ include_directories( ${SDK_DIR}/freetype/include )
 add_library( ${THIS_PROJECT} ${SOURCES})
 target_link_libraries(${THIS_PROJECT} freetype)
 
-#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+##USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/CryEngine/CryInput/CMakeLists.txt b/Code/CryEngine/CryInput/CMakeLists.txt
index efa4cb4..37c5dd2 100644
--- a/Code/CryEngine/CryInput/CMakeLists.txt
+++ b/Code/CryEngine/CryInput/CMakeLists.txt
@@ -129,7 +129,7 @@ source_group("TrackIR" FILES ${SourceGroup_TrackIR})
 
 # Support unity build with uber files
 set(CryInput_Uber_0_cpp ${SourceGroup_DX} ${SourceGroup_Durango} ${SourceGroup_Durango_Kinect} ${SourceGroup_Kinect} ${SourceGroup_Kinect_Filters} ${SourceGroup_Linux} ${SourceGroup_Orbis} ${SourceGroup_Root} ${SourceGroup_SDL} ${SourceGroup_Shared} ${SourceGroup_Synergy} ${SourceGroup_TrackIR}  )
-enable_unity_build( "CryInput_Uber_0.cpp" CryInput_Uber_0_cpp )
+#enable_unity_build( "CryInput_Uber_0.cpp" CryInput_Uber_0_cpp )
 
 set(NoUberFile  )
 
@@ -174,6 +174,6 @@ elseif (WIN32)
 	target_link_libraries( ${THIS_PROJECT} XINPUT9_1_0 )
 endif()
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/CryEngine/CryLiveCreate/CMakeLists.txt b/Code/CryEngine/CryLiveCreate/CMakeLists.txt
index 18a4cf2..ef3dbee 100644
--- a/Code/CryEngine/CryLiveCreate/CMakeLists.txt
+++ b/Code/CryEngine/CryLiveCreate/CMakeLists.txt
@@ -65,6 +65,6 @@ if (DEFINED DURANGO OR DEFINED WIN32)
 endif()
 
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
diff --git a/Code/CryEngine/CryMovie/CMakeLists.txt b/Code/CryEngine/CryMovie/CMakeLists.txt
index 8ceab40..126717b 100644
--- a/Code/CryEngine/CryMovie/CMakeLists.txt
+++ b/Code/CryEngine/CryMovie/CMakeLists.txt
@@ -83,10 +83,10 @@ source_group("Tracks" FILES ${SourceGroup_Tracks})
 
 # Support unity build with uber files
 set(CryMovie_uber_0_cpp ${SourceGroup_Root} ${SourceGroup_SourceFiles}  )
-enable_unity_build( "CryMovie_uber_0.cpp" CryMovie_uber_0_cpp )
+#enable_unity_build( "CryMovie_uber_0.cpp" CryMovie_uber_0_cpp )
 
 set(CryMovie_uber_1_cpp ${SourceGroup_Nodes} ${SourceGroup_Tracks}  )
-enable_unity_build( "CryMovie_uber_1.cpp" CryMovie_uber_1_cpp )
+#enable_unity_build( "CryMovie_uber_1.cpp" CryMovie_uber_1_cpp )
 
 set(NoUberFile  )
 
@@ -103,6 +103,6 @@ include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
 
 add_library( ${THIS_PROJECT} ${SOURCES})
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/CryEngine/CryNetwork/CMakeLists.txt b/Code/CryEngine/CryNetwork/CMakeLists.txt
index 67f2671..e3a9c07 100644
--- a/Code/CryEngine/CryNetwork/CMakeLists.txt
+++ b/Code/CryEngine/CryNetwork/CMakeLists.txt
@@ -373,25 +373,25 @@ source_group("VOIP" FILES ${SourceGroup_VOIP})
 
 # Support unity build with uber files
 set(CryNetwork_protocol_uber_cpp ${SourceGroup_Protocol}  )
-enable_unity_build( "CryNetwork_protocol_uber.cpp" CryNetwork_protocol_uber_cpp )
+#enable_unity_build( "CryNetwork_protocol_uber.cpp" CryNetwork_protocol_uber_cpp )
 
 set(CryNetwork_socket_uber_cpp ${SourceGroup_SocketLibrary}  )
-enable_unity_build( "CryNetwork_socket_uber.cpp" CryNetwork_socket_uber_cpp )
+#enable_unity_build( "CryNetwork_socket_uber.cpp" CryNetwork_socket_uber_cpp )
 
 set(CryNetwork_uber_0_cpp ${SourceGroup_Compression} ${SourceGroup_Streams}  )
-enable_unity_build( "CryNetwork_uber_0.cpp" CryNetwork_uber_0_cpp )
+#enable_unity_build( "CryNetwork_uber_0.cpp" CryNetwork_uber_0_cpp )
 
 set(CryNetwork_uber_1_cpp ${SourceGroup_Cryptography} ${SourceGroup_Main} ${SourceGroup_RCon}  )
-enable_unity_build( "CryNetwork_uber_1.cpp" CryNetwork_uber_1_cpp )
+#enable_unity_build( "CryNetwork_uber_1.cpp" CryNetwork_uber_1_cpp )
 
 set(CryNetwork_uber_2_cpp ${SourceGroup_Context} ${SourceGroup_Context_History} ${SourceGroup_Services} ${SourceGroup_Services_CryLAN}  )
-enable_unity_build( "CryNetwork_uber_2.cpp" CryNetwork_uber_2_cpp )
+#enable_unity_build( "CryNetwork_uber_2.cpp" CryNetwork_uber_2_cpp )
 
 set(CryNetwork_uber_3_cpp ${SourceGroup_DebugKit} ${SourceGroup_Http} ${SourceGroup_VOIP}  )
-enable_unity_build( "CryNetwork_uber_3.cpp" CryNetwork_uber_3_cpp )
+#enable_unity_build( "CryNetwork_uber_3.cpp" CryNetwork_uber_3_cpp )
 
 set(CryNetwork_uber_4_cpp ${SourceGroup_AntiCheat} ${SourceGroup_Debug}  )
-enable_unity_build( "CryNetwork_uber_4.cpp" CryNetwork_uber_4_cpp )
+#enable_unity_build( "CryNetwork_uber_4.cpp" CryNetwork_uber_4_cpp )
 
 set(NoUberFile ${SourceGroup_Root}  )
 
@@ -435,6 +435,6 @@ if(DURANGO)
 	target_link_libraries( ${THIS_PROJECT} Ws2_32 )
 endif(DURANGO)
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
diff --git a/Code/CryEngine/CryPhysics/CMakeLists.txt b/Code/CryEngine/CryPhysics/CMakeLists.txt
index 5970097..16a5761 100644
--- a/Code/CryEngine/CryPhysics/CMakeLists.txt
+++ b/Code/CryEngine/CryPhysics/CMakeLists.txt
@@ -127,6 +127,6 @@ include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
 
 add_library( ${THIS_PROJECT} ${SOURCES})
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
diff --git a/Code/CryEngine/CryScriptSystem/CMakeLists.txt b/Code/CryEngine/CryScriptSystem/CMakeLists.txt
index 246aaff..c76e3d0 100644
--- a/Code/CryEngine/CryScriptSystem/CMakeLists.txt
+++ b/Code/CryEngine/CryScriptSystem/CMakeLists.txt
@@ -101,7 +101,7 @@ source_group("Source Files" FILES ${SourceGroup_SourceFiles})
 
 # Support unity build with uber files
 set(CryScriptSystem_uber_0_cpp ${SourceGroup_HeaderFiles} ${SourceGroup_LuaDebugger} ${SourceGroup_LuaRemoteDebug} ${SourceGroup_ResourceFiles} ${SourceGroup_ScriptBindings}  )
-enable_unity_build( "CryScriptSystem_uber_0.cpp" CryScriptSystem_uber_0_cpp )
+#enable_unity_build( "CryScriptSystem_uber_0.cpp" CryScriptSystem_uber_0_cpp )
 
 set(NoUberFile ${SourceGroup_Root} ${SourceGroup_SourceFiles}  )
 
@@ -119,6 +119,6 @@ include_directories( ${SDK_DIR}/Lua/src )
 add_library( ${THIS_PROJECT} ${SOURCES})
 target_link_libraries(${THIS_PROJECT} lua)
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
diff --git a/Code/CryEngine/CrySystem/CMakeLists.txt b/Code/CryEngine/CrySystem/CMakeLists.txt
index ce1d1ef..a1ae84b 100644
--- a/Code/CryEngine/CrySystem/CMakeLists.txt
+++ b/Code/CryEngine/CrySystem/CMakeLists.txt
@@ -540,34 +540,42 @@ source_group("ZipDir" FILES ${SourceGroup_ZipDir})
 
 # Support unity build with uber files
 set(CrySystem_uber_0_cpp ${SourceGroup_HeaderFiles}  )
-enable_unity_build( "CrySystem_uber_0.cpp" CrySystem_uber_0_cpp )
+#enable_unity_build( "CrySystem_uber_0.cpp" CrySystem_uber_0_cpp )
 
 set(CrySystem_uber_1_cpp  )
-enable_unity_build( "CrySystem_uber_1.cpp" CrySystem_uber_1_cpp )
+#enable_unity_build( "CrySystem_uber_1.cpp" CrySystem_uber_1_cpp )
 
 set(CrySystem_uber_2_cpp ${SourceGroup_MemoryManager} ${SourceGroup_ResourceFiles} ${SourceGroup_StreamEngine}  )
-enable_unity_build( "CrySystem_uber_2.cpp" CrySystem_uber_2_cpp )
+#enable_unity_build( "CrySystem_uber_2.cpp" CrySystem_uber_2_cpp )
 
 set(CrySystem_uber_3_cpp ${SourceGroup_XML} ${SourceGroup_XML_XMLSink} ${SourceGroup_ZipDir}  )
-enable_unity_build( "CrySystem_uber_3.cpp" CrySystem_uber_3_cpp )
+#enable_unity_build( "CrySystem_uber_3.cpp" CrySystem_uber_3_cpp )
 
 set(CrySystem_uber_4_cpp ${SourceGroup_HTTPDownloader} ${SourceGroup_Localization} ${SourceGroup_Profiler} ${SourceGroup_Windows}  )
-enable_unity_build( "CrySystem_uber_4.cpp" CrySystem_uber_4_cpp )
+#enable_unity_build( "CrySystem_uber_4.cpp" CrySystem_uber_4_cpp )
 
+#<<<<<<< Updated upstream
 set(CrySystem_uber_5_cpp ${SourceGroup_TestSystem}  )
-enable_unity_build( "CrySystem_uber_5.cpp" CrySystem_uber_5_cpp )
+#enable_unity_build( "CrySystem_uber_5.cpp" CrySystem_uber_5_cpp )
+#||||||| merged common ancestors
+#set(CrySystem_uber_5_cpp ${SourceGroup_Scaleform} ${SourceGroup_TestSystem}  )
+#enable_unity_build( "CrySystem_uber_5.cpp" CrySystem_uber_5_cpp )
+#=======
+#set(CrySystem_uber_5_cpp ${SourceGroup_Scaleform} ${SourceGroup_TestSystem}  )
+#enable_unity_build( "CrySystem_uber_5.cpp" CrySystem_uber_5_cpp )
+#>>>>>>> Stashed changes
 
 set(CrySystem_uber_6_cpp ${SourceGroup_ExtensionSystem} ${SourceGroup_ExtensionSystem_TestCases} ${SourceGroup_MiniGUI} ${SourceGroup_NullImplementation} ${SourceGroup_Threading}  )
-enable_unity_build( "CrySystem_uber_6.cpp" CrySystem_uber_6_cpp )
+#enable_unity_build( "CrySystem_uber_6.cpp" CrySystem_uber_6_cpp )
 
 set(CrySystem_uber_7_cpp ${SourceGroup_CodeCoverage} ${SourceGroup_Statistics} ${SourceGroup_Statoscope} ${SourceGroup_ZLibCompressor}  )
-enable_unity_build( "CrySystem_uber_7.cpp" CrySystem_uber_7_cpp )
+#enable_unity_build( "CrySystem_uber_7.cpp" CrySystem_uber_7_cpp )
 
 set(CrySystem_uber_8_cpp ${SourceGroup_HuffmanEncoding} ${SourceGroup_JobManager} ${SourceGroup_JobManager_BlockingBackend} ${SourceGroup_JobManager_FallbackBackend} ${SourceGroup_JobManager_ThreadBackEnd} ${SourceGroup_OverloadSceneManager}  )
-enable_unity_build( "CrySystem_uber_8.cpp" CrySystem_uber_8_cpp )
+#enable_unity_build( "CrySystem_uber_8.cpp" CrySystem_uber_8_cpp )
 
 set(CrySystem_uber_9_cpp ${SourceGroup_LZ4Decompressor} ${SourceGroup_RemoteConsole} ${SourceGroup_Serialization} ${SourceGroup_Services} ${SourceGroup_Stroboscope} ${SourceGroup_VR} ${SourceGroup_VR_Oculus} ${SourceGroup_VR_OpenVR} ${SourceGroup_VR_Osvr} ${SourceGroup_ZLibDecompressor}  )
-enable_unity_build( "CrySystem_uber_9.cpp" CrySystem_uber_9_cpp )
+#enable_unity_build( "CrySystem_uber_9.cpp" CrySystem_uber_9_cpp )
 
 set(NoUberFile ${SourceGroup_Mac} ${SourceGroup_PlatformOS} ${SourceGroup_Root} ${SourceGroup_SourceFiles}  )
 
@@ -691,9 +699,9 @@ if (OPTION_ENABLE_SDK_OCULUS)
 	target_link_libraries( ${THIS_PROJECT} oculus )
 endif()
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
 
 if (DURANGO)
 	# add winmd search paths
diff --git a/Code/CryEngine/RenderDll/XRenderD3D9/CMakeLists.txt b/Code/CryEngine/RenderDll/XRenderD3D9/CMakeLists.txt
index 4cf6043..bc0760f 100644
--- a/Code/CryEngine/RenderDll/XRenderD3D9/CMakeLists.txt
+++ b/Code/CryEngine/RenderDll/XRenderD3D9/CMakeLists.txt
@@ -989,43 +989,43 @@ source_group("Source Files\\Gpu\\Physics" FILES ${SourceGroup_SourceFiles_Gpu_Ph
 
 # Support unity build with uber files
 set(CryGpuParticles_uber_cpp ${SourceGroup_HeaderFiles_Gpu} ${SourceGroup_HeaderFiles_Gpu_Particles} ${SourceGroup_HeaderFiles_Gpu_Physics} ${SourceGroup_SourceFiles_Gpu} ${SourceGroup_SourceFiles_Gpu_Particles} ${SourceGroup_SourceFiles_Gpu_Physics}  )
-enable_unity_build( "CryGpuParticles_uber.cpp" CryGpuParticles_uber_cpp )
+#enable_unity_build( "CryGpuParticles_uber.cpp" CryGpuParticles_uber_cpp )
 
 set(CryRenderer_dx_orbis_uber_0_cpp ${SourceGroup_DXOrbis} ${SourceGroup_DXOrbis_Device} ${SourceGroup_DXOrbis_Device_Resources} ${SourceGroup_DXOrbis_Device_Resources_Buffer} ${SourceGroup_DXOrbis_Device_Resources_Misc} ${SourceGroup_DXOrbis_Device_Resources_States}  )
-enable_unity_build( "CryRenderer_dx_orbis_uber_0.cpp" CryRenderer_dx_orbis_uber_0_cpp )
+#enable_unity_build( "CryRenderer_dx_orbis_uber_0.cpp" CryRenderer_dx_orbis_uber_0_cpp )
 
 set(CryRenderer_dx_orbis_uber_1_cpp ${SourceGroup_DXOrbis_DXOrbisGI} ${SourceGroup_DXOrbis_Debug} ${SourceGroup_DXOrbis_Device_Resources_Shaders} ${SourceGroup_DXOrbis_Device_Resources_Textures} ${SourceGroup_DXOrbis_Device_SCUE} ${SourceGroup_DXOrbis_Layer0} ${SourceGroup_DXOrbis_Shaders}  )
-enable_unity_build( "CryRenderer_dx_orbis_uber_1.cpp" CryRenderer_dx_orbis_uber_1_cpp )
+#enable_unity_build( "CryRenderer_dx_orbis_uber_1.cpp" CryRenderer_dx_orbis_uber_1_cpp )
 
 set(CryRenderer_render_elements_uber_0_cpp  )
-enable_unity_build( "CryRenderer_render_elements_uber_0.cpp" CryRenderer_render_elements_uber_0_cpp )
+#enable_unity_build( "CryRenderer_render_elements_uber_0.cpp" CryRenderer_render_elements_uber_0_cpp )
 
 set(CryRenderer_render_elements_uber_1_cpp ${SourceGroup_Common_RendElements} ${SourceGroup_Common_RendElements_LensOptics} ${SourceGroup_Common_RendElements_Utils} ${SourceGroup_Common_RendElements_h}  )
-enable_unity_build( "CryRenderer_render_elements_uber_1.cpp" CryRenderer_render_elements_uber_1_cpp )
+#enable_unity_build( "CryRenderer_render_elements_uber_1.cpp" CryRenderer_render_elements_uber_1_cpp )
 
 set(CryRenderer_textures_uber_cpp ${SourceGroup_Common_Textures} ${SourceGroup_Common_Textures_Image} ${SourceGroup_Common_Textures_Image_Image_h}  )
-enable_unity_build( "CryRenderer_textures_uber.cpp" CryRenderer_textures_uber_cpp )
+#enable_unity_build( "CryRenderer_textures_uber.cpp" CryRenderer_textures_uber_cpp )
 
 set(CryRenderer_uber_0_cpp ${SourceGroup_HeaderFiles}  )
-enable_unity_build( "CryRenderer_uber_0.cpp" CryRenderer_uber_0_cpp )
+#enable_unity_build( "CryRenderer_uber_0.cpp" CryRenderer_uber_0_cpp )
 
 set(CryRenderer_uber_1_cpp ${SourceGroup_SourceFiles_BenchmarkCustomization}  )
-enable_unity_build( "CryRenderer_uber_1.cpp" CryRenderer_uber_1_cpp )
+#enable_unity_build( "CryRenderer_uber_1.cpp" CryRenderer_uber_1_cpp )
 
 set(CryRenderer_uber_2_cpp ${SourceGroup_SourceFiles_D3DPostProcess}  )
-enable_unity_build( "CryRenderer_uber_2.cpp" CryRenderer_uber_2_cpp )
+#enable_unity_build( "CryRenderer_uber_2.cpp" CryRenderer_uber_2_cpp )
 
 set(CryRenderer_uber_3_cpp ${SourceGroup_Common} ${SourceGroup_Common_h}  )
-enable_unity_build( "CryRenderer_uber_3.cpp" CryRenderer_uber_3_cpp )
+#enable_unity_build( "CryRenderer_uber_3.cpp" CryRenderer_uber_3_cpp )
 
 set(CryRenderer_uber_4_cpp ${SourceGroup_Common_PostProcess} ${SourceGroup_Common_RenderMesh} ${SourceGroup_Common_Shaders}  )
-enable_unity_build( "CryRenderer_uber_4.cpp" CryRenderer_uber_4_cpp )
+#enable_unity_build( "CryRenderer_uber_4.cpp" CryRenderer_uber_4_cpp )
 
 set(CryRenderer_uber_5_cpp ${SourceGroup_DeviceManager}  )
-enable_unity_build( "CryRenderer_uber_5.cpp" CryRenderer_uber_5_cpp )
+#enable_unity_build( "CryRenderer_uber_5.cpp" CryRenderer_uber_5_cpp )
 
 set(CryRenderer_uber_6_cpp ${SourceGroup_GraphicsPipeline} ${SourceGroup_GraphicsPipeline_Common}  )
-enable_unity_build( "CryRenderer_uber_6.cpp" CryRenderer_uber_6_cpp )
+#enable_unity_build( "CryRenderer_uber_6.cpp" CryRenderer_uber_6_cpp )
 
 set(NoUberFile ${SourceGroup_3rdParty_AGS} ${SourceGroup_3rdParty_AMDExt} ${SourceGroup_3rdParty_LiquidVR} ${SourceGroup_3rdParty_NVAPI} ${SourceGroup_DX12} ${SourceGroup_DX12_3rdParty} ${SourceGroup_DX12_API} ${SourceGroup_DX12_API_Redirections} ${SourceGroup_DX12_Device} ${SourceGroup_DX12_GI} ${SourceGroup_DX12_Misc} ${SourceGroup_DX12_Resource} ${SourceGroup_DX12_Resource_Misc} ${SourceGroup_DX12_Resource_State} ${SourceGroup_DX12_Resource_Texture} ${SourceGroup_DX12_Resource_View} ${SourceGroup_DXGL} ${SourceGroup_DXGL_Definitions} ${SourceGroup_DXGL_Implementation} ${SourceGroup_DXGL_Interfaces} ${SourceGroup_DXGL_Specification} ${SourceGroup_Mac} ${SourceGroup_Root} ${SourceGroup_SourceFiles}  )
 
@@ -1176,10 +1176,10 @@ if (OPTION_GAME_PROJECT STREQUAL "BenchmarkVR")
 	target_link_libraries( ${THIS_PROJECT} BenchmarkFramework )
 endif()
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "../StdAfx.cpp" )
-EXCLUDE_FILE_FROM_MSVC_PRECOMPILED_HEADER( "../Common/lzss.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "../StdAfx.cpp" )
+#EXCLUDE_FILE_FROM_MSVC_PRECOMPILED_HEADER( "../Common/lzss.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
 
 #------------------------------------------------------------------------------
 #Create additionally DX12 module.
@@ -1202,7 +1202,7 @@ if (WIN32)
 		target_link_libraries( ${THIS_PROJECT} ${SDK_DIR}/NVAPI/x86/nvapi.lib )
 	endif()
 	target_compile_definitions( ${THIS_PROJECT} PUBLIC -DCRY_USE_DX12 )
-	USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "../StdAfx.cpp" )
-	SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+	#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "../StdAfx.cpp" )
+	#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
 endif()
 #------------------------------------------------------------------------------
diff --git a/Code/CryExtensions/CryLobby/Module/CMakeLists.txt b/Code/CryExtensions/CryLobby/Module/CMakeLists.txt
index 5a06eb5..8b41831 100644
--- a/Code/CryExtensions/CryLobby/Module/CMakeLists.txt
+++ b/Code/CryExtensions/CryLobby/Module/CMakeLists.txt
@@ -130,16 +130,16 @@ source_group("Steam" FILES ${SourceGroup_Steam})
 
 # Support unity build with uber files
 set(CryLobby_durango_live_uber_cpp ${SourceGroup_DurangoLive}  )
-enable_unity_build( "CryLobby_durango_live_uber.cpp" CryLobby_durango_live_uber_cpp )
+#enable_unity_build( "CryLobby_durango_live_uber.cpp" CryLobby_durango_live_uber_cpp )
 
 set(CryLobby_orbis_psn_uber_cpp ${SourceGroup_OrbisPSN}  )
-enable_unity_build( "CryLobby_orbis_psn_uber.cpp" CryLobby_orbis_psn_uber_cpp )
+#enable_unity_build( "CryLobby_orbis_psn_uber.cpp" CryLobby_orbis_psn_uber_cpp )
 
 set(CryLobby_steam_uber_cpp ${SourceGroup_Steam}  )
-enable_unity_build( "CryLobby_steam_uber.cpp" CryLobby_steam_uber_cpp )
+#enable_unity_build( "CryLobby_steam_uber.cpp" CryLobby_steam_uber_cpp )
 
 set(CryLobby_uber_0_cpp ${SourceGroup_LAN} ${SourceGroup_Root}  )
-enable_unity_build( "CryLobby_uber_0.cpp" CryLobby_uber_0_cpp )
+#enable_unity_build( "CryLobby_uber_0.cpp" CryLobby_uber_0_cpp )
 
 set(NoUberFile  )
 
@@ -189,9 +189,9 @@ elseif (WIN32)
 	endif()
 endif()
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
 
 if (DURANGO)
 	# add winmd search paths
diff --git a/Code/GameSDK/GameDll/CMakeLists.txt b/Code/GameSDK/GameDll/CMakeLists.txt
index 79dbe36..0c03062 100644
--- a/Code/GameSDK/GameDll/CMakeLists.txt
+++ b/Code/GameSDK/GameDll/CMakeLists.txt
@@ -1654,79 +1654,79 @@ source_group("XboxOneLive" FILES ${SourceGroup_XboxOneLive})
 
 # Support unity build with uber files
 set(CryGameSDKDLL_uber_0_cpp ${SourceGroup_AI} ${SourceGroup_AI_BehaviorTree} ${SourceGroup_AI_Corpses} ${SourceGroup_AI_HazardModule} ${SourceGroup_AI_Modules} ${SourceGroup_AI_RadioChatter} ${SourceGroup_AI_RateOfDeath}  )
-enable_unity_build( "CryGameSDKDLL_uber_0.cpp" CryGameSDKDLL_uber_0_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_0.cpp" CryGameSDKDLL_uber_0_cpp )
 
 set(CryGameSDKDLL_uber_1_cpp ${SourceGroup_ActorFiles} ${SourceGroup_ActorFiles_Animation}  )
-enable_unity_build( "CryGameSDKDLL_uber_1.cpp" CryGameSDKDLL_uber_1_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_1.cpp" CryGameSDKDLL_uber_1_cpp )
 
 set(CryGameSDKDLL_uber_10_cpp ${SourceGroup_GameRules} ${SourceGroup_ItemFiles_Items}  )
-enable_unity_build( "CryGameSDKDLL_uber_10.cpp" CryGameSDKDLL_uber_10_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_10.cpp" CryGameSDKDLL_uber_10_cpp )
 
 set(CryGameSDKDLL_uber_11_cpp ${SourceGroup_ItemFiles_WeaponFiles} ${SourceGroup_ItemFiles_WeaponFiles_FireModes}  )
-enable_unity_build( "CryGameSDKDLL_uber_11.cpp" CryGameSDKDLL_uber_11_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_11.cpp" CryGameSDKDLL_uber_11_cpp )
 
 set(CryGameSDKDLL_uber_12_cpp ${SourceGroup_ItemFiles_WeaponFiles_Projectiles} ${SourceGroup_ItemFiles_WeaponFiles_Weapons}  )
-enable_unity_build( "CryGameSDKDLL_uber_12.cpp" CryGameSDKDLL_uber_12_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_12.cpp" CryGameSDKDLL_uber_12_cpp )
 
 set(CryGameSDKDLL_uber_13_cpp ${SourceGroup_ItemFiles_WeaponFiles_Weapons_PickAndThrow} ${SourceGroup_ItemFiles_WeaponFiles_ZoomModes} ${SourceGroup_Localization} ${SourceGroup_MovingPlatforms} ${SourceGroup_Multiplayer_ActorFiles_player}  )
-enable_unity_build( "CryGameSDKDLL_uber_13.cpp" CryGameSDKDLL_uber_13_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_13.cpp" CryGameSDKDLL_uber_13_cpp )
 
 set(CryGameSDKDLL_uber_14_cpp ${SourceGroup_Multiplayer_ActorFiles_player_animation} ${SourceGroup_Multiplayer_AudioFiles} ${SourceGroup_Multiplayer_Effects} ${SourceGroup_Multiplayer_Effects_GameEffects}  )
-enable_unity_build( "CryGameSDKDLL_uber_14.cpp" CryGameSDKDLL_uber_14_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_14.cpp" CryGameSDKDLL_uber_14_cpp )
 
 set(CryGameSDKDLL_uber_15_cpp ${SourceGroup_Multiplayer_Effects_HUDEventListeners} ${SourceGroup_Multiplayer_Effects_RenderElements} ${SourceGroup_Multiplayer_Effects_RenderNodes} ${SourceGroup_Multiplayer_Effects_Tools} ${SourceGroup_Multiplayer_Entities} ${SourceGroup_Multiplayer_GameCodeCoverage} ${SourceGroup_Multiplayer_GameRules}  )
-enable_unity_build( "CryGameSDKDLL_uber_15.cpp" CryGameSDKDLL_uber_15_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_15.cpp" CryGameSDKDLL_uber_15_cpp )
 
 set(CryGameSDKDLL_uber_16_cpp ${SourceGroup_Multiplayer_GameRules_Events} ${SourceGroup_Multiplayer_GameRules_Modules}  )
-enable_unity_build( "CryGameSDKDLL_uber_16.cpp" CryGameSDKDLL_uber_16_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_16.cpp" CryGameSDKDLL_uber_16_cpp )
 
 set(CryGameSDKDLL_uber_17_cpp ${SourceGroup_Multiplayer_GameRules_Objectives} ${SourceGroup_Multiplayer_Graphics} ${SourceGroup_Multiplayer_ItemFiles_WeaponFiles_Projectiles} ${SourceGroup_Multiplayer_Network} ${SourceGroup_Multiplayer_Network_DownloadMgr}  )
-enable_unity_build( "CryGameSDKDLL_uber_17.cpp" CryGameSDKDLL_uber_17_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_17.cpp" CryGameSDKDLL_uber_17_cpp )
 
 set(CryGameSDKDLL_uber_18_cpp ${SourceGroup_Multiplayer_Network_Lobby} ${SourceGroup_Multiplayer_Network_Squad} ${SourceGroup_Multiplayer_Statistics} ${SourceGroup_Multiplayer_Testing}  )
-enable_unity_build( "CryGameSDKDLL_uber_18.cpp" CryGameSDKDLL_uber_18_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_18.cpp" CryGameSDKDLL_uber_18_cpp )
 
 set(CryGameSDKDLL_uber_19_cpp ${SourceGroup_Multiplayer_Utility} ${SourceGroup_Nodes}  )
-enable_unity_build( "CryGameSDKDLL_uber_19.cpp" CryGameSDKDLL_uber_19_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_19.cpp" CryGameSDKDLL_uber_19_cpp )
 
 set(CryGameSDKDLL_uber_2_cpp ${SourceGroup_ActorFiles_AudioFiles} ${SourceGroup_ActorFiles_Player}  )
-enable_unity_build( "CryGameSDKDLL_uber_2.cpp" CryGameSDKDLL_uber_2_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_2.cpp" CryGameSDKDLL_uber_2_cpp )
 
 set(CryGameSDKDLL_uber_20_cpp ${SourceGroup_RealtimeRemoteUpdateSystem} ${SourceGroup_RecordingSystem} ${SourceGroup_RecordingSystem_ReplayObjects} ${SourceGroup_StartupFiles} ${SourceGroup_Stereo3D}  )
-enable_unity_build( "CryGameSDKDLL_uber_20.cpp" CryGameSDKDLL_uber_20_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_20.cpp" CryGameSDKDLL_uber_20_cpp )
 
 set(CryGameSDKDLL_uber_21_cpp ${SourceGroup_Turret_Turret} ${SourceGroup_UI} ${SourceGroup_UI_EventSystems}  )
-enable_unity_build( "CryGameSDKDLL_uber_21.cpp" CryGameSDKDLL_uber_21_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_21.cpp" CryGameSDKDLL_uber_21_cpp )
 
 set(CryGameSDKDLL_uber_22_cpp ${SourceGroup_UI_HUD} ${SourceGroup_UI_Menu3dModels} ${SourceGroup_UI_ProfileOptions} ${SourceGroup_UI_Utils}  )
-enable_unity_build( "CryGameSDKDLL_uber_22.cpp" CryGameSDKDLL_uber_22_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_22.cpp" CryGameSDKDLL_uber_22_cpp )
 
 set(CryGameSDKDLL_uber_23_cpp ${SourceGroup_Utility} ${SourceGroup_VTOLVehicleManager} ${SourceGroup_VehicleFiles} ${SourceGroup_VehicleFiles_ActionFiles}  )
-enable_unity_build( "CryGameSDKDLL_uber_23.cpp" CryGameSDKDLL_uber_23_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_23.cpp" CryGameSDKDLL_uber_23_cpp )
 
 set(CryGameSDKDLL_uber_24_cpp ${SourceGroup_DynamicResponseSystem} ${SourceGroup_VehicleFiles_DamageFiles} ${SourceGroup_VehicleFiles_MovementFiles} ${SourceGroup_XboxOneLive}  )
-enable_unity_build( "CryGameSDKDLL_uber_24.cpp" CryGameSDKDLL_uber_24_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_24.cpp" CryGameSDKDLL_uber_24_cpp )
 
 set(CryGameSDKDLL_uber_3_cpp ${SourceGroup_ActorFiles_Player_ActionControllers_InteractiveAction} ${SourceGroup_ActorFiles_Player_ActionControllers_LargeObjectInteraction} ${SourceGroup_ActorFiles_Player_ActionControllers_MountedGun} ${SourceGroup_ActorFiles_Player_ActionControllers_Slide} ${SourceGroup_ActorFiles_Player_ActionControllers_StealthKill} ${SourceGroup_ActorFiles_Player_AimAssistance} ${SourceGroup_ActorFiles_Player_Camera} ${SourceGroup_ActorFiles_Player_HitDeathReactions}  )
-enable_unity_build( "CryGameSDKDLL_uber_3.cpp" CryGameSDKDLL_uber_3_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_3.cpp" CryGameSDKDLL_uber_3_cpp )
 
 set(CryGameSDKDLL_uber_4_cpp ${SourceGroup_ActorFiles_Player_MovementTransitions} ${SourceGroup_ActorFiles_Player_PlayerStates} ${SourceGroup_ActorFiles_Player_PlayerStates_Linked} ${SourceGroup_ActorFiles_Player_PlayerStates_Movement} ${SourceGroup_ActorFiles_Player_PlayerStates_Util}  )
-enable_unity_build( "CryGameSDKDLL_uber_4.cpp" CryGameSDKDLL_uber_4_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_4.cpp" CryGameSDKDLL_uber_4_cpp )
 
 set(CryGameSDKDLL_uber_5_cpp ${SourceGroup_ActorFiles_Player_ProceduralWeaponAnimation} ${SourceGroup_AntiCheat}  )
-enable_unity_build( "CryGameSDKDLL_uber_5.cpp" CryGameSDKDLL_uber_5_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_5.cpp" CryGameSDKDLL_uber_5_cpp )
 
 set(CryGameSDKDLL_uber_6_cpp ${SourceGroup_Checkpoints} ${SourceGroup_EditorGameFiles} ${SourceGroup_EntityUtility}  )
-enable_unity_build( "CryGameSDKDLL_uber_6.cpp" CryGameSDKDLL_uber_6_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_6.cpp" CryGameSDKDLL_uber_6_cpp )
 
 set(CryGameSDKDLL_uber_7_cpp ${SourceGroup_GameFiles}  )
-enable_unity_build( "CryGameSDKDLL_uber_7.cpp" CryGameSDKDLL_uber_7_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_7.cpp" CryGameSDKDLL_uber_7_cpp )
 
 set(CryGameSDKDLL_uber_8_cpp ${SourceGroup_GameFiles_Environment} ${SourceGroup_GameFiles_Environment_InteractiveObjects} ${SourceGroup_GameFiles_Environment_Tornado}  )
-enable_unity_build( "CryGameSDKDLL_uber_8.cpp" CryGameSDKDLL_uber_8_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_8.cpp" CryGameSDKDLL_uber_8_cpp )
 
 set(CryGameSDKDLL_uber_9_cpp ${SourceGroup_GameFiles_GameObjectParameters} ${SourceGroup_GameFiles_RuntimePrefabs} ${SourceGroup_GameFiles_ScreenFX} ${SourceGroup_GameMechanismManager}  )
-enable_unity_build( "CryGameSDKDLL_uber_9.cpp" CryGameSDKDLL_uber_9_cpp )
+#enable_unity_build( "CryGameSDKDLL_uber_9.cpp" CryGameSDKDLL_uber_9_cpp )
 
 set(NoUberFile ${SourceGroup_Boids} ${SourceGroup_Root}  )
 
@@ -1777,8 +1777,8 @@ elseif (WIN32)
 	target_link_libraries( ${THIS_PROJECT} ws2_32 Gdi32 netapi32 )
 endif()
 
-USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
 
 FILE(WRITE "durango_title_id.h" "// Auto generated by CMake\n")
\ No newline at end of file
diff --git a/Code/Launcher/DedicatedLauncher/CMakeLists.txt b/Code/Launcher/DedicatedLauncher/CMakeLists.txt
index f9b2650..d10910a 100644
--- a/Code/Launcher/DedicatedLauncher/CMakeLists.txt
+++ b/Code/Launcher/DedicatedLauncher/CMakeLists.txt
@@ -47,4 +47,4 @@ if(WIN32)
 	target_link_libraries( ${THIS_PROJECT} Shlwapi )
 endif()
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
diff --git a/Code/Launcher/WindowsLauncher/CMakeLists.txt b/Code/Launcher/WindowsLauncher/CMakeLists.txt
index 3cfb51d..27a3b4f 100644
--- a/Code/Launcher/WindowsLauncher/CMakeLists.txt
+++ b/Code/Launcher/WindowsLauncher/CMakeLists.txt
@@ -41,4 +41,4 @@ if(WIN32)
 	target_link_libraries( ${THIS_PROJECT} Shlwapi )
 endif()
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
diff --git a/Code/Libs/bigdigits/CMakeLists.txt b/Code/Libs/bigdigits/CMakeLists.txt
index 8f430b5..38508b6 100644
--- a/Code/Libs/bigdigits/CMakeLists.txt
+++ b/Code/Libs/bigdigits/CMakeLists.txt
@@ -29,4 +29,4 @@ set (SOURCES
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/expat/CMakeLists.txt b/Code/Libs/expat/CMakeLists.txt
index 824b189..342db1f 100644
--- a/Code/Libs/expat/CMakeLists.txt
+++ b/Code/Libs/expat/CMakeLists.txt
@@ -51,6 +51,6 @@ include_directories( ${SDK_DIR}/expat-2.1.0/lib )
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 
-#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+##USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/freetype/CMakeLists.txt b/Code/Libs/freetype/CMakeLists.txt
index 92daae1..807e072 100644
--- a/Code/Libs/freetype/CMakeLists.txt
+++ b/Code/Libs/freetype/CMakeLists.txt
@@ -51,6 +51,6 @@ include_directories( ${SDK_DIR}/freetype/include )
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 
-#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+##USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/lua/CMakeLists.txt b/Code/Libs/lua/CMakeLists.txt
index 5807d03..d97da09 100644
--- a/Code/Libs/lua/CMakeLists.txt
+++ b/Code/Libs/lua/CMakeLists.txt
@@ -84,6 +84,6 @@ include_directories( ${SDK_DIR}/Lua/src )
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 
-#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+##USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/lz4/CMakeLists.txt b/Code/Libs/lz4/CMakeLists.txt
index 044f2ca..53339ca 100644
--- a/Code/Libs/lz4/CMakeLists.txt
+++ b/Code/Libs/lz4/CMakeLists.txt
@@ -31,6 +31,6 @@ include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 
-#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+##USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/lzma/CMakeLists.txt b/Code/Libs/lzma/CMakeLists.txt
index 2b0afc2..1f79cdd 100644
--- a/Code/Libs/lzma/CMakeLists.txt
+++ b/Code/Libs/lzma/CMakeLists.txt
@@ -42,6 +42,6 @@ include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 
-#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+##USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/lzss/CMakeLists.txt b/Code/Libs/lzss/CMakeLists.txt
index 53c6129..7b8207a 100644
--- a/Code/Libs/lzss/CMakeLists.txt
+++ b/Code/Libs/lzss/CMakeLists.txt
@@ -24,6 +24,6 @@ include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 
-#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+##USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/md5/CMakeLists.txt b/Code/Libs/md5/CMakeLists.txt
index d9a3457..8af37e8 100644
--- a/Code/Libs/md5/CMakeLists.txt
+++ b/Code/Libs/md5/CMakeLists.txt
@@ -25,6 +25,6 @@ include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 
-#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+##USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/oculus/CMakeLists.txt b/Code/Libs/oculus/CMakeLists.txt
index 6cedd2a..0505af9 100644
--- a/Code/Libs/oculus/CMakeLists.txt
+++ b/Code/Libs/oculus/CMakeLists.txt
@@ -164,4 +164,4 @@ include_directories( ${SDK_DIR}/OculusSDK/LibOVRKernel/Src )
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/prt/CMakeLists.txt b/Code/Libs/prt/CMakeLists.txt
index 924dd54..7273146 100644
--- a/Code/Libs/prt/CMakeLists.txt
+++ b/Code/Libs/prt/CMakeLists.txt
@@ -118,4 +118,4 @@ add_definitions( -DNOMINMAX )
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 target_link_libraries( ${THIS_PROJECT} tiff )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/python/CMakeLists.txt b/Code/Libs/python/CMakeLists.txt
index b3ebeae..fc28c8a 100644
--- a/Code/Libs/python/CMakeLists.txt
+++ b/Code/Libs/python/CMakeLists.txt
@@ -389,4 +389,4 @@ add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 target_link_libraries(${THIS_PROJECT} expat zlib)
 target_link_libraries(${THIS_PROJECT} shell32)
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/strophe/CMakeLists.txt b/Code/Libs/strophe/CMakeLists.txt
index bd98c40..a16e2dc 100644
--- a/Code/Libs/strophe/CMakeLists.txt
+++ b/Code/Libs/strophe/CMakeLists.txt
@@ -55,4 +55,4 @@ add_definitions(-DXML_STATIC)
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/tiff/CMakeLists.txt b/Code/Libs/tiff/CMakeLists.txt
index e2e6427..0d83d52 100644
--- a/Code/Libs/tiff/CMakeLists.txt
+++ b/Code/Libs/tiff/CMakeLists.txt
@@ -71,6 +71,6 @@ include_directories( ${SDK_DIR}/zlib-1.2.8 )
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 
-#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+##USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/tomcrypt/CMakeLists.txt b/Code/Libs/tomcrypt/CMakeLists.txt
index 938c387..9228e72 100644
--- a/Code/Libs/tomcrypt/CMakeLists.txt
+++ b/Code/Libs/tomcrypt/CMakeLists.txt
@@ -482,4 +482,4 @@ endif()
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/yasli/CMakeLists.txt b/Code/Libs/yasli/CMakeLists.txt
index 80f49c7..460b368 100644
--- a/Code/Libs/yasli/CMakeLists.txt
+++ b/Code/Libs/yasli/CMakeLists.txt
@@ -63,4 +63,4 @@ add_definitions(-DNOT_USE_CRY_MEMORY_MANAGER)
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Libs/zlib/CMakeLists.txt b/Code/Libs/zlib/CMakeLists.txt
index 686b8db..8f6521a 100644
--- a/Code/Libs/zlib/CMakeLists.txt
+++ b/Code/Libs/zlib/CMakeLists.txt
@@ -60,6 +60,6 @@ include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
 
 add_library( ${THIS_PROJECT} STATIC ${SOURCES})
 
-#USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
+##USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "StdAfx.h" "StdAfx.cpp" )
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
\ No newline at end of file
diff --git a/Code/Sandbox/Plugins/EditorAudioControlsEditor/CMakeLists.txt b/Code/Sandbox/Plugins/EditorAudioControlsEditor/CMakeLists.txt
index ae77e5e..c0a0a2c 100644
--- a/Code/Sandbox/Plugins/EditorAudioControlsEditor/CMakeLists.txt
+++ b/Code/Sandbox/Plugins/EditorAudioControlsEditor/CMakeLists.txt
@@ -62,7 +62,7 @@ source_group("qt" FILES ${SourceGroup_qt})
 
 # Support unity build with uber files
 set(EditorAudioControlsEditor_uber_0_cpp ${SourceGroup_Root} ${SourceGroup_qt}  )
-enable_unity_build( "EditorAudioControlsEditor_uber_0.cpp" EditorAudioControlsEditor_uber_0_cpp )
+#enable_unity_build( "EditorAudioControlsEditor_uber_0.cpp" EditorAudioControlsEditor_uber_0_cpp )
 
 set(NoUberFile  )
 
@@ -99,4 +99,4 @@ target_link_libraries(${THIS_PROJECT} EditorQt)
 # Use the Widgets module from Qt 5.
 target_link_libraries(${THIS_PROJECT} Qt5::Widgets)
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
diff --git a/Code/Sandbox/Plugins/EditorAudioControlsEditor/EditorSDLMixer/CMakeLists.txt b/Code/Sandbox/Plugins/EditorAudioControlsEditor/EditorSDLMixer/CMakeLists.txt
index 1017a72..fe3156b 100644
--- a/Code/Sandbox/Plugins/EditorAudioControlsEditor/EditorSDLMixer/CMakeLists.txt
+++ b/Code/Sandbox/Plugins/EditorAudioControlsEditor/EditorSDLMixer/CMakeLists.txt
@@ -21,7 +21,7 @@ set (SourceGroup_Root
 
 # Support unity build with uber files
 set(EditorSDLMixer_uber_0_cpp ${SourceGroup_Root}  )
-enable_unity_build( "EditorSDLMixer_uber_0.cpp" EditorSDLMixer_uber_0_cpp )
+#enable_unity_build( "EditorSDLMixer_uber_0.cpp" EditorSDLMixer_uber_0_cpp )
 
 
 set (SOURCES
@@ -53,4 +53,4 @@ target_link_libraries(${THIS_PROJECT} EditorCommon)
 # Use the Widgets module from Qt 5.
 target_link_libraries(${THIS_PROJECT} Qt5::Widgets)
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
diff --git a/Code/Sandbox/Plugins/EditorAudioControlsEditor/EditorWwise/CMakeLists.txt b/Code/Sandbox/Plugins/EditorAudioControlsEditor/EditorWwise/CMakeLists.txt
index 8e83093..0e3d6de 100644
--- a/Code/Sandbox/Plugins/EditorAudioControlsEditor/EditorWwise/CMakeLists.txt
+++ b/Code/Sandbox/Plugins/EditorAudioControlsEditor/EditorWwise/CMakeLists.txt
@@ -21,7 +21,7 @@ set (SourceGroup_Root
 
 # Support unity build with uber files
 set(EditorWwise_uber_0_cpp ${SourceGroup_Root}  )
-enable_unity_build( "EditorWwise_uber_0.cpp" EditorWwise_uber_0_cpp )
+#enable_unity_build( "EditorWwise_uber_0.cpp" EditorWwise_uber_0_cpp )
 
 
 set (SOURCES
@@ -53,4 +53,4 @@ target_link_libraries(${THIS_PROJECT} EditorCommon)
 # Use the Widgets module from Qt 5.
 target_link_libraries(${THIS_PROJECT} Qt5::Widgets)
 
-SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
+#SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
